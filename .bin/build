#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

BASE_DIR=$( realpath $( dirname "${BASH_SOURCE[0]}" )/../ )
CI="${CI:-false}"
TYPE="${1:-both}"
NAME="$(cat pack.toml | grep "name = " | sed -e 's/name = "\(.*\)"/\1/')"
VERSION="$(cat pack.toml | grep "version = " | sed -e 's/version = "\(.*\)"/\1/')"
NEOFORGE_VERSION="$(cat "$BASE_DIR/pack.toml" | grep "neoforge = " | sed -e 's/neoforge = "\(.*\)"/\1/')"

function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

function packwiz-path() {
    packwiz_path="$(command -v packwiz || true)"
    if [[ -z "$packwiz_path" ]]; then
        packwiz_path="$BASE_DIR/.bin/packwiz"
    fi

    if [[ -f "$packwiz_path" ]]; then
        echo "$packwiz_path"
    fi
}

function download-file() {
    local file=$1

    if [[ ! -f "$BASE_DIR/download/$file" ]] && [[ ! -z "${MOD_BASE_URL+x}" ]]; then
        url="$MOD_BASE_URL/${file/ /%20}"
        status="$(curl -o /dev/null --silent --head --write-out '%{http_code}\n' "$url")"
        if [[ "$status" == "200" ]]; then
            curl -sL "$MOD_BASE_URL/$file" -o "$BASE_DIR/download/$file" 2>/dev/null 1>&2 || true
        fi
    fi
}

function check-upload() {
    local file=$1

    if [[ ! -z "${MOD_BASE_URL+x}" ]]; then
        url="$MOD_BASE_URL/$(echo "$file" | sed "s/ /%20/g")"
        status="$(curl -o /dev/null --silent --head --write-out '%{http_code}\n' "$url")"
        if [[ "$status" != "200" ]]; then
            echo "$url"
            upload-file "$file"
        fi
    fi
}

function upload-file() {
    local file=$1

    if [[ ! -z "${SCP_URL+x}" ]]; then
        UPLOAD_FILE="/public$(echo "$MOD_BASE_URL" | sed -e 's/https.*\.com//g')"
        SSH_CONFIGURED="$(echo bye | sftp -b - $SCP_URL 2>/dev/null 1>&2 && echo "true" || echo "false")"
        if [[ "$SSH_CONFIGURED" == "true" ]]; then
            echo "Upload $file to $SCP_URL:$UPLOAD_FILE/$file"
            scp "$BASE_DIR/download/$file" "$SCP_URL:$UPLOAD_FILE/$file"
        fi
    fi
}

# check for commands we need
zip_installed="$(type zip 2>/dev/null 1>&2 && echo "true" || echo "false")"
if [[ "$zip_installed" == "false" ]]; then
    echo "zip is not installed. Installing dependencies"
    "$BASE_DIR/.bin/install-dependencies"
fi

if [[ -z "$(packwiz-path)" ]]; then
    echo "packwiz is not installed. Installing dependencies"
    "$BASE_DIR/.bin/install-dependencies"
fi

jq_installed="$(type jq 2>/dev/null 1>&2 && echo "true" || echo "false")"
if [[ "$jq_installed" == "false" ]]; then
    echo "jq is not installed. Installing dependencies"
    "$BASE_DIR/.bin/install-dependencies"
fi

java_installed="$(type java 2>/dev/null 1>&2 && echo "true" || echo "false")"
if [[ "$java_installed" == "false" ]]; then
    echo "java is not installed. Installing dependencies"
    "$BASE_DIR/.bin/install-dependencies"
fi

cd $BASE_DIR

if [[ -f ".env" ]]; then
    set -a # automatically export all variables
    source .env
    set +a
fi

echo "Build pack $NAME v$VERSION"
echo "====="
echo "Type: $TYPE"
echo -e "=====\n\n"

# remove any previous build
rm -rf "$BASE_DIR/build/*.zip" "$BASE_DIR/build/client" "$BASE_DIR/build/server" "$BASE_DIR/build/work" "$BASE_DIR/*.zip"
mkdir -p "$BASE_DIR/download/packwiz"

# verifiy Complementary + Euphoria shaders
shaderpack_count="$(find shaderpacks -iname "Complementary*EuphoriaPatches*.zip" | wc -l)"
if [[ "$shaderpack_count" != 2 ]] && [[ ! -z "${SHADER_UNBOUND_URL+x}" ]] && [[ ! -z "${SHADER_REIMAGINED_URL+x}" ]]; then
    echo "Complementary + Euphoria shaders missing, downloading from provided URLs"

    filename="$(urldecode "$(basename "$SHADER_UNBOUND_URL")")"
    curl -sL "$SHADER_UNBOUND_URL" -o "$BASE_DIR/shaderpacks/$filename"

    filename="$(urldecode "$(basename "$SHADER_REIMAGINED_URL")")"
    curl -sL "$SHADER_REIMAGINED_URL" -o "$BASE_DIR/shaderpacks/$filename"
fi

shaderpack_count="$(find shaderpacks -iname "Complementary*EuphoriaPatches*.zip" | wc -l)"
if [[ "$shaderpack_count" != 2 ]]; then
    echo "Complementary + Euphoria shaders missing, cannot build client"
    exit 1
fi

zip_file="$NAME-$VERSION.zip"
server_zip_file="$NAME-$VERSION-server.zip"
# refresh packwiz
echo "Refreshing hashes..."
"$BASE_DIR/.bin/packwiz-wrapper" --cache $BASE_DIR/download/packwiz refresh
echo -e "=====\n\n"

if [[ "$TYPE" == "both" ]] || [[ "$TYPE" == "client" ]]; then
    # main CF client export
    echo "Exporting CurseForge pack..."
    "$BASE_DIR/.bin/packwiz-wrapper"  --cache $BASE_DIR/download/packwiz cf export --side client

    # make working directory structure
    mkdir -p "$BASE_DIR/build/client"
    mv *.zip "$BASE_DIR/build/"

    # workaround for packwiz bug: https://github.com/packwiz/packwiz/issues/295
    echo "Patching CurseForge pack..."
    cd "$BASE_DIR/build"
    unzip "$zip_file" -d "$BASE_DIR/build/client" 2>/dev/null 1>&2
    rm "$zip_file"

    # patch manifest to add neoforge version
    cd "$BASE_DIR/build/client"
    cat "$BASE_DIR/build/client/manifest.json" | jq ".minecraft.modLoaders[0] |= {\"id\": \"neoforge-$NEOFORGE_VERSION\", \"primary\": true}" > "$BASE_DIR/build/client/manifest.tmp.json"
    mv "$BASE_DIR/build/client/manifest.tmp.json" "$BASE_DIR/build/client/manifest.json"

    # re-zip client pack
    zip -r "$zip_file" * 2>/dev/null 1>&2
    cd "$BASE_DIR/build"
    mv "$BASE_DIR/build/client/$zip_file" $BASE_DIR/build/
    rm -rf "$BASE_DIR/build/client"

    echo "CurseForge client zip exported to $BASE_DIR/build/$zip_file"
    echo -e "=====\n\n"
fi

if [[ "$TYPE" == "both" ]] || [[ "$TYPE" == "server" ]]; then
    # main CF server export
    echo "Exporting CurseForge server pack..."

    mkdir -p "$BASE_DIR/build/server"
    cd "$BASE_DIR/build/server"
    # download packwiz-installer
    if [[ ! -f "packwiz-installer-bootstrap.jar" ]]; then
        curl -sL https://github.com/packwiz/packwiz-installer-bootstrap/releases/download/v0.0.3/packwiz-installer-bootstrap.jar -o $BASE_DIR/download/packwiz-installer-bootstrap.jar
    fi

    mkdir -p "$BASE_DIR/build/server/mods"
    old_filename=""
    any_download="false"
    can_continue="true"
    echo "Building server (pass 1/2)..."
    # loop over packwiz install output to get mods that need to be downloaded manually
    while read line; do
        if [[ ! "$line" =~ ^Please\ go\ to ]]; then
            continue
        fi

        cf_url="$(echo "$line" | sed -e 's/Please go to \(.*\) and save this file to \(.*\)/\1/')"
        filename="$(basename "$(echo "$line" | sed -e 's/Please go to \(.*\) and save this file to \(.*\)/\2/')")"
        if [[ -f "mods/$filename" ]] || [[ "$old_filename" == "$filename" ]]; then
            continue
        fi

        any_download="true"
        download-file "$filename"
        if [[ -f "$BASE_DIR/download/$filename" ]]; then
            cp "$BASE_DIR/download/$filename" "mods/$filename"
            check-upload "$filename"
        fi

        if [[ ! -f "mods/$filename" ]]; then
            echo ERROR: Found file that requires manual download. Download "$cf_url" to "$BASE_DIR/download/$filename"
            can_continue="false"
        fi
        old_filename="$filename"
    done <<< "$(java -jar $BASE_DIR/download/packwiz-installer-bootstrap.jar -g -s server $BASE_DIR/pack.toml 2>&1)" || true

    if [[ "$can_continue" == "false" ]]; then
        exit 1
    fi
    # re-run installer with manually downloaded mods
    if [[ ! -f "packwiz.json" ]]; then
        echo "Building server (pass 2/2)..."
        java -jar $BASE_DIR/download/packwiz-installer-bootstrap.jar -g -s server $BASE_DIR/pack.toml 2>/dev/null 1>&2
    fi

    rm "$BASE_DIR/build/server/packwiz"*
    sed -i -e "s/MODLOADER_VERSION=.*/MODLOADER_VERSION=$NEOFORGE_VERSION/" "$BASE_DIR/server/variables.txt"
    cp "$BASE_DIR/server/"* "$BASE_DIR/build/server"

    zip -r "$server_zip_file" * 2>/dev/null 1>&2
    mv "$server_zip_file" "$BASE_DIR/build/"
    rm -rf "$BASE_DIR/build/server"
    echo "CurseForge server zip exported to $BASE_DIR/build/$server_zip_file"
fi
